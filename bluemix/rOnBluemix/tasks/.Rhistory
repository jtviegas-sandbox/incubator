source('~/workspace/R/commons/db2.R')
source('~/workspace/R/commons/db2.R')
cleanData()
source('~/workspace/R/commons/db2.R')
createData(100000)
createData(1000)
source('~/workspace/R/commons/db2.R')
createData(10000)
createData(1000)
source('~/workspace/R/commons/db2.R')
createData(1000)
createData(100)
source('~/workspace/R/commons/db2.R')
createData(100)
createRandomData(1,6)
r<-createRandomData(1,6)
r
insertRow(r)
startDbCnx
oCNX
dbSendQuery(oCNX,'select * from custom_data')
dbSendQuery(oCNX,'select * from custom_data')
?dbSendQuery
dbSendQuery(oCNX,'select * from custom_data')
oCNX
stopDbCnx
oCNX
oDRIVER<<-JDBC(DB2_DRIVER_NAME,DB2_LIB)
oDRIVER<<-JDBC(DB2_DRIVER_NAME,DB2_LIB)
source('~/workspace/R/commons/db2.R')
oCNX<<-dbConnect(oDRIVER,DB2_CONNSTR, user=DB2_USER, password=DB2_PASS)
source('~/workspace/R/commons/db2.R')
oCNX<<-dbConnect(oDRIVER,DB2_CONNSTR, user=DB2_USER, password=DB2_PASS)
if(length(find.package("RJDBC",quiet=TRUE))==0){
install.packages("RJDBC")
}
library(RJDBC)
oCNX<<-dbConnect(oDRIVER,DB2_CONNSTR, user=DB2_USER, password=DB2_PASS)
dbConnect(oDRIVER,DB2_CONNSTR, user=DB2_USER, password=DB2_PASS)
startDbCnx<-function(){
oDRIVER<<-JDBC(DB2_DRIVER_NAME,DB2_LIB)
oCNX<<-dbConnect(oDRIVER,DB2_CONNSTR, user=DB2_USER, password=DB2_PASS)
}
dbConnect(oDRIVER,DB2_CONNSTR, user=DB2_USER, password=DB2_PASS)
source('~/workspace/R/commons/db2.R')
DB"_PASS
"
DB2_PASS
oDRIVER<<-JDBC(DB2_DRIVER_NAME,DB2_LIB)
oDRIVER
oCNX<<-dbConnect(oDRIVER,DB2_CONNSTR, user=DB2_USER, password=DB2_PASS)
oCNX
dbSendQuery(oCNX,'select * from custom_data')
createData(10)
createData(10000)
source('~/workspace/R/commons/db2.R')
createData(50000)
source('~/workspace/R/commons/db2.R')
createData(1000)
createData2(1000)
source('~/workspace/R/commons/db2.R')
createData2(1000)
createData2(50000)
random?
;
?random
??random
.Random.seed
.Random.seed
sample.int(2)
sample.int(5)
source('~/workspace/R/db/mongo.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/data/random.R')
source('~/workspace/R/data/random.R')
source('~/.active-rstudio-document')
source('~/workspace/R/data/random.R')
Sys.time()
as.integer(Sys.time())
createRandomSkinnyRecord('metric',as.integer(Sys.time()))
h<-vector()
class(h)
h
?vector
is.vector(h)
??string
h<-'sdsdsds,'
h
subst(h,1,length(h)-1)
substr(h,1,length(h)-1)
length(h)
?len
?length
nchar(h)
substr(h,1,nchar(h)-1)
df<-createRandomSkinnyRecord('metric',as.integer(Sys.time()))
df
source('~/workspace/R/data/conv.R')
df2json(df)
source('~/workspace/R/data/random.R')
createRandomSkinnyRecord('metric',as.integer(Sys.time()))
df<-createRandomSkinnyRecord('metric',as.integer(Sys.time()))
df2json(df)
db_co
mongo.is.connected(db_co)
db_user<-'IbmCloud_31207n7n_rtkd11bj_uh3pvrqu'
db_pass<-'aDnY2HqiXSbSTNEltcCXrkEuLx8pL2m3'
db_host<-'ds049570.mongolab.com'
db_port<-49570
db_name<-'IbmCloud_31207n7n_rtkd11bj'
INITIAL_TS_EPOCH <- 1088604240
db_co<-getConnection(db_host, db_port, db_user, db_pass, db_name)
mongo.is.connected(db_co)
j<-df2json(df)
j
mongo.is.connected(db_co)
dbInsertDocument(db_co,'plot_data',j)
if(length(find.package("rmongodb",quiet=TRUE))==0){
install.packages("rmongodb")
}
library(rmongodb)
dbInsertDocument(db_co,'plot_data',j)
install.packages("rmongodb")
install.packages("rmongodb")
library(rmongodb)
dbInsertDocument(db_co,'plot_data',j)
library(rmongo)
install.packages("rmongo")
install.packages("RMongo")
library(RMongo)
?library
detach(rjdbc)
detach(RJDBC)
detach(RJDBC)
?library
detach('RJDBC')
detach(name='RJDBC')
detach(package:rjdbc)
pkg<-"package:rjdbc"
detach(pkg,character.only = TRUE)
library(rjdbc)
pkg<-"package:RJDBC"
detach(pkg,character.only = TRUE)
pkg<-"package:DBI"
detach(pkg,character.only = TRUE)
library(RMongo)
dbInsertDocument(db_co,'plot_data',j)
db_host
ip<-db_host
pt<-db_port
user<-db_user
pass<-db_pass
database<-db_name
threshold<-3
ip
?mongoDbConnect
db_co<-mongoDbConnect(db_name, db_host,db_port)
dbAuthenticate(db_co,db_user,db_pass)
dbInsertDocument(db_co,'plot_data',j)
df
class(df[1,1])
class(df[1,2])
class(df[1,3])
class(df[2,3])
is.character(df[1,2])
is.character(df[1,3])
is.character(df[1,4])
is.character(df[1,1])
f<-'sds'
is.character(f)
df[1,4]
df[1,3]
df[1,2]
df[1,1]
is.numeric(df[1,1])
is.numeric(df[[1,1]])
is.numeric(df[[1,2]])
is.numeric(df[[1,3]])
is.numeric(df[[1,4]])
df[[1,]]
df
df$ts
df$ts[1]
is.numeric(df$ts[1])
class(df$ts[1])
var<-df[1,2]
var
class(var)
s<-21132
is.numeric(s)
is.character(s)
s<-'das'
is.numeric(s)
is.character(s)
df
lapply(df,as.character)
d<-lapply(df,as.character)
class(d)
s<-21311
df
as.character(df[1,3])
t<-as.character(df[1,3])
is.character(t)
is.numeric(t)
t
is.double(t)
is.double(df[1,3])
is.flost(df[1,3])
is.float(df[1,3])
is.numeric(df[1,3])
df
is.double("65.7417369739177")
is.double("65,7417369739177")
is.double("65.7417369739177")
is.numeric("65.7417369739177")
as.numeric("53.4")
as.numeric("53,4")
n<-as.numeric("53.4")
n
class(n)
is.integer(53.4)
is.integer(n)
n<-as.integer("53.4")
n
is.integer(n)
is.numeric(n)
n
is.double(n)
is.numeric(n)
n<-43.4
is.numeric(n)
is.double(n)
is.numeric(n)
n
df
as.numeric(df[1,2])
as.numeric(df[[1,2]])
is.numeric(df[[1,2]])
is.numeric(df[[1,1]])
as.numeric(df[[1,1]])
as.numeric(df[[1,2]])
as.numeric(df[1,2])
as.numeric(df[1,1])
as.double(df[1,1])
as.character(df[1,1])
as.character(df[1,2])
as.character(df[1,3])
v1<-as.character(df[1,1])
v1
is.numeric(v1)
as.numeric(v1)
v1<-as.character(df[1,2])
v1<-as.character(df[1,1])
v2<-as.character(df[1,2])
v3<-as.character(df[1,3])
v1
v2
v3
as.numeric(v1)
as.numeric(v2)
as.numeric(v3)
source('~/workspace/R/data/conv.R')
df
df2json(df)
source('~/workspace/R/data/conv.R')
i<1
i<-1
j<-1
dval<-as.character(df[i,j])
nval<-as.numeric(dval)
nval
!is.na(nval)
dval
j<-2
j<-2
dval<-as.character(df[i,j])
dval
nval<-as.numeric(dval)
!is.na(nval)
charval<-paste('"',dval,'"',sep='')
charval
json<-paste(json,names(df)[j],':',df[i,j],',',sep='')
json<-'{'
json<-paste(json,names(df)[j],':',df[i,j],',',sep='')
json
j<-3
dval<-as.character(df[i,j])
nval<-as.numeric(dval)
!is.na(nval)
charval<-dval
charval
json<-paste(json,names(df)[j],':',df[i,j],',',sep='')
json
json<-substr(json,1,nchar(json)-1)
json
json<-paste(json,'}')
json
jsons[i]<-json
jsons<-vector()
jsons[i]<-json
jsons
df
df2json(df)
?as.numeric
source('~/workspace/R/data/conv.R')
df2json(df)
df2json(df)
source('~/workspace/R/data/conv.R')
df2json(df)
source('~/workspace/R/data/conv.R')
df2json(df)
source('~/workspace/R/data/conv.R')
source('~/workspace/R/data/conv.R')
"'s'"
source('~/workspace/R/data/conv.R')
df2json(df)
source('~/workspace/R/data/conv.R')
df2json(df)
source('~/workspace/R/data/conv.R')
df2json(df)
dbInsertDocument(db_co,'plot_data',j)
d<-'{"foo": "bar"}'
d
source('~/workspace/R/data/conv.R')
df2json(df)
j<-2
df
dval<-as.character(df[i,j])
dval
paste("\"",dval,"\"",sep="")
source('~/workspace/R/data/conv.R')
df2json(df)
j<-df2json(df)
dbInsertDocument(db_co,'plot_data',j)
cleanData<-function(){
;
:
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/techdays/data.R')
detach("package:RMongo",character.only = TRUE)
db_co<-getConnection(db_host, db_port, db_user, db_pass, db_name)
dbGetQuery(mongo, db_name, '{}')
pkgs<-c("package:RJDBC","package:DBI")
for(i in 1:length(pkgs)){
detach("package:RMongo",character.only = TRUE)
}
if(length(find.package("RMongo",quiet=TRUE))==0){
install.packages("RMongo")
}
library(RMongo)
source('~/workspace/R/data/random.R')
source('~/workspace/R/db/mongo.R')
dbGetQuery(mongo, db_name, '{}')
dbGetQuery(db_co, db_name, '{}')
?dbGetQuery
dbGetQuery(db_co, db_name, '')
db_name
dbGetQuery(db_co, db_name, '"metric":"metric"')
class(db_co)
class(db_co)
dbGetQuery(db_co, db_name, '{"metric":"metric"}')
output <- dbInsertDocument(db_co, "test_data", '{"foo": "bar"}')
db_user<-'IbmCloud_31207n7n_rtkd11bj_uh3pvrqu'
output <- dbInsertDocument(db_co, "test_data", '{"foo": "bar"}')
library(RMongo)
source('~/workspace/R/data/random.R')
source('~/workspace/R/db/mongo.R')
output <- dbInsertDocument(db_co, "test_data", '{"foo": "bar"}')
source('~/workspace/R/techdays/data.R')
detach("package:RMongo",character.only = TRUE)
find.package("RMongo",quiet=TRUE)
detach("RMongo")
detach("packages:RMongo")
detach("package:RMongo")
?detach
detach("package:RMongo", unload=TRUE)
detach(name="package:RMongo", unload=TRUE)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
detach_package("RMongo")
library(RMongo)
output <- dbInsertDocument(db_co, "test_data", '{"foo": "bar"}')
library(RMongo)
o<-mongoDbConnect(db_name, db_host,db_port)
dbAuthenticate(o,db_user,db_pass)
output <- dbInsertDocument(o, "test_data", '{"foo": "bar"}')
output
dbGetDistinct(o, 'test_data', '{"foo": "bar"}')
d<-dbGetDistinct(o, 'test_data', '{"foo": "bar"}')
d
print(d)
d==""
d<-dbGetQuery(o, 'test_data', '{"foo": "bar"}')
d
source('~/workspace/R/commons/sys.R')
source('~/workspace/R/commons/data.R')
source('~/workspace/R/commons/data_mongo.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/commons/data_mongo.R')
source('~/workspace/R/techdays/data.R')
source('~/workspace/R/techdays/data.R')
createSingleData()
source('~/workspace/R/techdays/data.R')
createSingleData()
dbGetQuery(getConnection(), data_collection, '{}')
source('~/workspace/R/techdays/data.R')
getData()
source('~/workspace/R/techdays/data.R')
getData()
source('~/workspace/R/techdays/data.R')
getData()
cleanData()
getData()
source('~/workspace/R/techdays/data.R')
createData(10)
getData()
createData(4)
getData()
source('~/workspace/R/techdays/data.R')
createData(4)
getData()
createData(1000)
?rnorm
source('~/workspace/R/techdays/data.R')
createData(10)
getData()
getData()
createData(10)
source('~/workspace/R/techdays/data.R')
createData(10)
names(df)
names(df)[4]<-"s"
names(df)
cbind(names(df),c("a"))
rbind(names(df),c("a"))
createData(10)
source('~/workspace/R/techdays/data.R')
createData(10)
getData()
createData(1000)
getData()
head(getData())
getOption('repos')
install.packages('RMongo')
library(RMongo)
library(RMongo)
library(RMonfgo)
?mongoDbConnect
oDB_CONNECTION<<-mongoDbConnect(db_name, db_host,db_port)
mongoDbConnect(db_name, db_host,db_port)
source('~/.active-rstudio-document')
source('~/workspace/R/data/random.R')
source('~/workspace/R/techdays/data.R')
createSingleData()
getData()
cleanData()
getData()
createSingleData()
getData()
source('~/workspace/github/bluemix/rOnBluemix/tasks/generator.r')
setwd("~/workspace/R")
source('~/workspace/github/bluemix/rOnBluemix/tasks/lib.R')
getwd()
pwd
setwd("~/workspace/github/bluemix/rOnBluemix/tasks")
getData()
library(RMongo)
createSingleData()
source('~/workspace/github/bluemix/rOnBluemix/tasks/generator.r')
source('~/workspace/github/bluemix/rOnBluemix/tasks/generator.r')
source('~/workspace/github/bluemix/rOnBluemix/tasks/generator.r')
print(getData())
source('~/workspace/github/bluemix/rOnBluemix/tasks/generator.r')
source('~/workspace/github/bluemix/rOnBluemix/tasks/generator.r')
?mongoDbConnect
Sys.getenv('HOME')
source('~/workspace/github/bluemix/rOnBluemix/tasks/lib.R')
source('~/workspace/github/bluemix/rOnBluemix/tasks/plotit.R')
getData()
d<-getData()
head(d)
d<-cbind(d[,1],d[2:3])
d
d<-getData()
d<-cbind(d[,1],d[3:4])
d
plotSkinnySeries(d)
plotSkinnySeries(d, 'ronbluemix')
plotSkinnySeries(d, 'ronbluemix')
plotSkinnySeries(d, 'ronbluemix')
source('~/workspace/github/bluemix/rOnBluemix/tasks/plotit.R')
plotSkinnySeries(d, 'ronbluemix')
plotData()
source('~/workspace/github/bluemix/rOnBluemix/tasks/plotit.R')
plotData()
plotData()
plotData()
